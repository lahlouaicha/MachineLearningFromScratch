# -*- coding: utf-8 -*-
"""KNN_Regressor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iUbdBb7tUYqbG1yN7syfnLW-UOIjj3NB
"""

import numpy as np 
import math

class KNN_Regressor(): 
    """
    This class corresponds to the implementation of the K-Nearest Neighbors Classifier.
    Parameters: 
    - k (int): Number of nearest neighbos to consider. 
    """
    def __init__(self, k = 3):
      """
      Initialization of attributes of the class
      """
      self.k = k

    def fit(self, X, y ):
      """
      Keep the design matrix, and the label matrix as attributes.
      - X (np.array): Design Matrix
      - y (np.array): Array of label 
      """
      self.X = X
      self.y = y

    def predict(self, X_test):
      """
      Function to predict the labels of the points in the feature matrix X_test.
      
      - X_test 
      """
      def distance (point_1, point_2):
        """
        Function that computes the distance l2 between two points. 
        - point_1(np.array): First point  
        - point_2 (np.array): Second point
        """
        return math.sqrt(sum((point_1-point_2)**2))
      
      # Determine number of predictions to make and nitialize predictions array to return
      nb_predictions = X_test.shape[0]
      predictions = np.zeros(nb_predictions)
      nb_points = self.X.shape[0]

      #Determine the prediction for each point 
      for row in range(nb_predictions):
        point_1 = X[row, : ]
        # Compute the distances to other points in the dataset 
        distances = np.zeros(nb_points )
        for i in range(nb_points):
          point_2 = self.X[i,:]
          distances[i] = distance(point_1, point_2)
        
        # Determine the predictions based on distances to points in the trainning set 
        indexes = np.argsort(distances) # indices that would sort the array 
        k_indexes = indexes[:self.k] # Filter the k first indices
        k_labels = self.y[k_indexes] # Get labels of k nearest neighbors           
        predictions[row] = np.mean(k_labels) # Set prediction as mean of labels
      
      return predictions